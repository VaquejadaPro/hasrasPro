import React, { useState, useEffect } from 'react';
import {
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Alert,
  RefreshControl,
  View,
  Text,
  StyleSheet,
  Modal,
  TextInput,
  Switch,
} from 'react-native';
import { Feather } from '@expo/vector-icons';
import { animalService } from '../services/animalService';
import { RegistroSaude, TipoEventoSaude } from '../types';

interface SaudeAnimalScreenProps {
  harasId: string;
}

const SaudeAnimalScreen: React.FC<SaudeAnimalScreenProps> = ({ harasId }) => {
  const [registros, setRegistros] = useState<RegistroSaude[]>([]);
  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [editingRegistro, setEditingRegistro] = useState<RegistroSaude | null>(null);
  const [activeTab, setActiveTab] = useState<'vacinas' | 'medicamentos' | 'exames' | 'todos'>('vacinas');

  // Form states
  const [formData, setFormData] = useState({
    tipo: 'vacina' as TipoEventoSaude,
    animalId: '',
    data: new Date().toISOString().split('T')[0],
    descricao: '',
    veterinario: '',
    observacoes: '',
    dosagem: '',
    medicamento: '',
    laboratorio: '',
    lote: '',
    dataValidade: '',
    custo: '',
    proximaAplicacao: '',
    reacao: false,
    tipoReacao: '',
  });

  useEffect(() => {
    loadRegistros();
  }, []);

  const loadRegistros = async () => {
    try {
      setLoading(true);
      const data = await animalService.getRegistrosSaude(harasId);
      setRegistros(data);
    } catch (error) {
      console.error('Erro ao carregar registros de saúde:', error);
      Alert.alert('Erro', 'Falha ao carregar registros de saúde');
    } finally {
      setLoading(false);
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await loadRegistros();
    setRefreshing(false);
  };

  const handleSaveRegistro = async () => {
    try {
      if (!formData.animalId || !formData.data || !formData.descricao) {
        Alert.alert('Erro', 'Preencha todos os campos obrigatórios');
        return;
      }

      const registroData = {
        ...formData,
        harasId,
        custo: parseFloat(formData.custo) || 0,
        proximaAplicacao: formData.proximaAplicacao || null,
        dataValidade: formData.dataValidade || null,
      };

      if (editingRegistro) {
        await animalService.updateRegistroSaude(editingRegistro.id, registroData);
        Alert.alert('Sucesso', 'Registro atualizado com sucesso');
      } else {
        await animalService.createRegistroSaude(registroData);
        Alert.alert('Sucesso', 'Registro de saúde criado com sucesso');
      }

      setShowCreateModal(false);
      setEditingRegistro(null);
      resetForm();
      loadRegistros();
    } catch (error) {
      console.error('Erro ao salvar registro:', error);
      Alert.alert('Erro', 'Falha ao salvar registro de saúde');
    }
  };

  const handleDeleteRegistro = async (id: string) => {
    Alert.alert(
      'Confirmar Exclusão',
      'Deseja realmente excluir este registro de saúde?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Excluir',
          style: 'destructive',
          onPress: async () => {
            try {
              await animalService.deleteRegistroSaude(id);
              Alert.alert('Sucesso', 'Registro excluído com sucesso');
              loadRegistros();
            } catch (error) {
              console.error('Erro ao excluir registro:', error);
              Alert.alert('Erro', 'Falha ao excluir registro');
            }
          },
        },
      ]
    );
  };

  const resetForm = () => {
    setFormData({
      tipo: 'vacina',
      animalId: '',
      data: new Date().toISOString().split('T')[0],
      descricao: '',
      veterinario: '',
      observacoes: '',
      dosagem: '',
      medicamento: '',
      laboratorio: '',
      lote: '',
      dataValidade: '',
      custo: '',
      proximaAplicacao: '',
      reacao: false,
      tipoReacao: '',
    });
  };

  const openEditModal = (registro: RegistroSaude) => {
    setEditingRegistro(registro);
    setFormData({
      tipo: registro.tipo,
      animalId: registro.animalId,
      data: registro.data.split('T')[0],
      descricao: registro.descricao,
      veterinario: registro.veterinario || '',
      observacoes: registro.observacoes || '',
      dosagem: registro.dosagem || '',
      medicamento: registro.medicamento || '',
      laboratorio: registro.laboratorio || '',
      lote: registro.lote || '',
      dataValidade: registro.dataValidade?.split('T')[0] || '',
      custo: registro.custo?.toString() || '',
      proximaAplicacao: registro.proximaAplicacao?.split('T')[0] || '',
      reacao: registro.reacao || false,
      tipoReacao: registro.tipoReacao || '',
    });
    setShowCreateModal(true);
  };

  const getFilteredRegistros = () => {
    let filtered = registros;

    if (activeTab === 'vacinas') {
      filtered = filtered.filter(r => r.tipo === 'vacina');
    } else if (activeTab === 'medicamentos') {
      filtered = filtered.filter(r => r.tipo === 'medicamento');
    } else if (activeTab === 'exames') {
      filtered = filtered.filter(r => r.tipo === 'exame');
    }

    return filtered.sort((a, b) => new Date(b.data).getTime() - new Date(a.data).getTime());
  };

  const getTipoIcon = (tipo: TipoEventoSaude) => {
    switch (tipo) {
      case 'vacina':
        return 'shield';
      case 'medicamento':
        return 'pill';
      case 'exame':
        return 'eye';
      case 'cirurgia':
        return 'scissors';
      case 'ferimento':
        return 'alert-triangle';
      default:
        return 'heart';
    }
  };

  const getTipoColor = (tipo: TipoEventoSaude) => {
    switch (tipo) {
      case 'vacina':
        return '#4CAF50';
      case 'medicamento':
        return '#2196F3';
      case 'exame':
        return '#FF9800';
      case 'cirurgia':
        return '#9C27B0';
      case 'ferimento':
        return '#F44336';
      default:
        return '#666';
    }
  };

  const isVencendoVacina = (proximaAplicacao?: string) => {
    if (!proximaAplicacao) return false;
    const hoje = new Date();
    const proxima = new Date(proximaAplicacao);
    const diasParaVencer = Math.ceil((proxima.getTime() - hoje.getTime()) / (1000 * 3600 * 24));
    return diasParaVencer <= 30 && diasParaVencer > 0;
  };

  const isVencidaVacina = (proximaAplicacao?: string) => {
    if (!proximaAplicacao) return false;
    const hoje = new Date();
    const proxima = new Date(proximaAplicacao);
    return proxima < hoje;
  };

  const renderRegistroCard = (registro: RegistroSaude) => {
    const vencendo = isVencendoVacina(registro.proximaAplicacao);
    const vencida = isVencidaVacina(registro.proximaAplicacao);

    return (
      <View key={registro.id} style={[
        styles.registroCard,
        vencida && styles.registroVencido,
        vencendo && styles.registroVencendo,
      ]}>
        <View style={styles.registroHeader}>
          <View style={styles.registroInfo}>
            <Feather
              name={getTipoIcon(registro.tipo)}
              size={20}
              color={getTipoColor(registro.tipo)}
              style={styles.registroIcon}
            />
            <View>
              <Text style={styles.registroTipo}>
                {registro.tipo.charAt(0).toUpperCase() + registro.tipo.slice(1)}
              </Text>
              <Text style={styles.registroData}>
                {new Date(registro.data).toLocaleDateString('pt-BR')}
              </Text>
            </View>
          </View>
          <View style={styles.registroActions}>
            {registro.reacao && (
              <View style={styles.reacaoBadge}>
                <Feather name="alert-circle" size={12} color="#F44336" />
                <Text style={styles.reacaoText}>Reação</Text>
              </View>
            )}
            <TouchableOpacity
              onPress={() => openEditModal(registro)}
              style={styles.actionButton}
            >
              <Feather name="edit-2" size={16} color="#666" />
            </TouchableOpacity>
            <TouchableOpacity
              onPress={() => handleDeleteRegistro(registro.id)}
              style={styles.actionButton}
            >
              <Feather name="trash-2" size={16} color="#F44336" />
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.registroDetails}>
          <Text style={styles.detailText}>
            <Text style={styles.detailLabel}>Animal:</Text> {registro.animalNome}
          </Text>
          <Text style={styles.detailText}>
            <Text style={styles.detailLabel}>Descrição:</Text> {registro.descricao}
          </Text>
          {registro.veterinario && (
            <Text style={styles.detailText}>
              <Text style={styles.detailLabel}>Veterinário:</Text> {registro.veterinario}
            </Text>
          )}
          {registro.medicamento && (
            <Text style={styles.detailText}>
              <Text style={styles.detailLabel}>Medicamento:</Text> {registro.medicamento}
            </Text>
          )}
          {registro.dosagem && (
            <Text style={styles.detailText}>
              <Text style={styles.detailLabel}>Dosagem:</Text> {registro.dosagem}
            </Text>
          )}
          {registro.laboratorio && (
            <Text style={styles.detailText}>
              <Text style={styles.detailLabel}>Laboratório:</Text> {registro.laboratorio}
            </Text>
          )}
          {registro.lote && (
            <Text style={styles.detailText}>
              <Text style={styles.detailLabel}>Lote:</Text> {registro.lote}
            </Text>
          )}
          {registro.custo && (
            <Text style={styles.detailText}>
              <Text style={styles.detailLabel}>Custo:</Text> R$ {registro.custo.toFixed(2)}
            </Text>
          )}
          {registro.proximaAplicacao && (
            <Text style={[
              styles.detailText,
              vencida && styles.proximaVencida,
              vencendo && styles.proximaVencendo,
            ]}>
              <Text style={styles.detailLabel}>Próxima aplicação:</Text>{' '}
              {new Date(registro.proximaAplicacao).toLocaleDateString('pt-BR')}
              {vencida && ' ⚠️ Vencida'}
              {vencendo && ' ⏰ Vencendo'}
            </Text>
          )}
          {registro.reacao && registro.tipoReacao && (
            <Text style={styles.detailText}>
              <Text style={styles.detailLabel}>Tipo de reação:</Text> {registro.tipoReacao}
            </Text>
          )}
          {registro.observacoes && (
            <Text style={styles.detailText}>
              <Text style={styles.detailLabel}>Observações:</Text> {registro.observacoes}
            </Text>
          )}
        </View>
      </View>
    );
  };

  const renderCreateModal = () => (
    <Modal
      visible={showCreateModal}
      animationType="slide"
      presentationStyle="pageSheet"
    >
      <SafeAreaView style={styles.modalContainer}>
        <View style={styles.modalHeader}>
          <TouchableOpacity
            onPress={() => {
              setShowCreateModal(false);
              setEditingRegistro(null);
              resetForm();
            }}
          >
            <Feather name="x" size={24} color="#666" />
          </TouchableOpacity>
          <Text style={styles.modalTitle}>
            {editingRegistro ? 'Editar Registro' : 'Novo Registro de Saúde'}
          </Text>
          <TouchableOpacity onPress={handleSaveRegistro}>
            <Text style={styles.saveButton}>Salvar</Text>
          </TouchableOpacity>
        </View>

        <ScrollView style={styles.modalContent}>
          <View style={styles.formGroup}>
            <Text style={styles.label}>Tipo de Registro</Text>
            <View style={styles.radioGroup}>
              {[
                'vacina',
                'medicamento',
                'exame',
                'cirurgia',
                'ferimento'
              ].map((tipo) => (
                <TouchableOpacity
                  key={tipo}
                  style={[
                    styles.radioButton,
                    formData.tipo === tipo && {
                      backgroundColor: getTipoColor(tipo as TipoEventoSaude),
                      borderColor: getTipoColor(tipo as TipoEventoSaude),
                    },
                  ]}
                  onPress={() => setFormData({ ...formData, tipo: tipo as TipoEventoSaude })}
                >
                  <Text
                    style={[
                      styles.radioText,
                      formData.tipo === tipo && styles.radioTextSelected,
                    ]}
                  >
                    {tipo.charAt(0).toUpperCase() + tipo.slice(1)}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Animal *</Text>
            <TextInput
              style={styles.input}
              value={formData.animalId}
              onChangeText={(text) => setFormData({ ...formData, animalId: text })}
              placeholder="ID do animal"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Data *</Text>
            <TextInput
              style={styles.input}
              value={formData.data}
              onChangeText={(text) => setFormData({ ...formData, data: text })}
              placeholder="YYYY-MM-DD"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Descrição *</Text>
            <TextInput
              style={styles.input}
              value={formData.descricao}
              onChangeText={(text) => setFormData({ ...formData, descricao: text })}
              placeholder="Descrição do procedimento"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Veterinário</Text>
            <TextInput
              style={styles.input}
              value={formData.veterinario}
              onChangeText={(text) => setFormData({ ...formData, veterinario: text })}
              placeholder="Nome do veterinário"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Medicamento/Vacina</Text>
            <TextInput
              style={styles.input}
              value={formData.medicamento}
              onChangeText={(text) => setFormData({ ...formData, medicamento: text })}
              placeholder="Nome do medicamento ou vacina"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Dosagem</Text>
            <TextInput
              style={styles.input}
              value={formData.dosagem}
              onChangeText={(text) => setFormData({ ...formData, dosagem: text })}
              placeholder="Ex: 10ml, 2 comprimidos"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Laboratório</Text>
            <TextInput
              style={styles.input}
              value={formData.laboratorio}
              onChangeText={(text) => setFormData({ ...formData, laboratorio: text })}
              placeholder="Nome do laboratório"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Lote</Text>
            <TextInput
              style={styles.input}
              value={formData.lote}
              onChangeText={(text) => setFormData({ ...formData, lote: text })}
              placeholder="Número do lote"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Data de Validade</Text>
            <TextInput
              style={styles.input}
              value={formData.dataValidade}
              onChangeText={(text) => setFormData({ ...formData, dataValidade: text })}
              placeholder="YYYY-MM-DD"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Próxima Aplicação</Text>
            <TextInput
              style={styles.input}
              value={formData.proximaAplicacao}
              onChangeText={(text) => setFormData({ ...formData, proximaAplicacao: text })}
              placeholder="YYYY-MM-DD"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Custo (R$)</Text>
            <TextInput
              style={styles.input}
              value={formData.custo}
              onChangeText={(text) => setFormData({ ...formData, custo: text })}
              placeholder="0.00"
              keyboardType="numeric"
            />
          </View>

          <View style={styles.formGroup}>
            <View style={styles.switchGroup}>
              <Text style={styles.label}>Houve reação?</Text>
              <Switch
                value={formData.reacao}
                onValueChange={(value) => setFormData({ ...formData, reacao: value })}
                trackColor={{ false: '#DDD', true: '#F44336' }}
                thumbColor={formData.reacao ? '#FFF' : '#FFF'}
              />
            </View>
          </View>

          {formData.reacao && (
            <View style={styles.formGroup}>
              <Text style={styles.label}>Tipo de Reação</Text>
              <TextInput
                style={styles.input}
                value={formData.tipoReacao}
                onChangeText={(text) => setFormData({ ...formData, tipoReacao: text })}
                placeholder="Descreva a reação observada"
              />
            </View>
          )}

          <View style={styles.formGroup}>
            <Text style={styles.label}>Observações</Text>
            <TextInput
              style={[styles.input, styles.textArea]}
              value={formData.observacoes}
              onChangeText={(text) => setFormData({ ...formData, observacoes: text })}
              placeholder="Observações adicionais..."
              multiline
              numberOfLines={4}
            />
          </View>
        </ScrollView>
      </SafeAreaView>
    </Modal>
  );

  const getTabCount = (tab: 'vacinas' | 'medicamentos' | 'exames' | 'todos') => {
    if (tab === 'vacinas') {
      return registros.filter(r => r.tipo === 'vacina').length;
    } else if (tab === 'medicamentos') {
      return registros.filter(r => r.tipo === 'medicamento').length;
    } else if (tab === 'exames') {
      return registros.filter(r => r.tipo === 'exame').length;
    }
    return registros.length;
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Saúde Animal</Text>
        <TouchableOpacity
          onPress={() => setShowCreateModal(true)}
          style={styles.addButton}
        >
          <Feather name="plus" size={20} color="#FFF" />
        </TouchableOpacity>
      </View>

      <View style={styles.tabsContainer}>
        {[
          { key: 'vacinas', label: 'Vacinas', icon: 'shield' },
          { key: 'medicamentos', label: 'Medicamentos', icon: 'pill' },
          { key: 'exames', label: 'Exames', icon: 'eye' },
          { key: 'todos', label: 'Todos', icon: 'list' },
        ].map((tab) => (
          <TouchableOpacity
            key={tab.key}
            style={[styles.tab, activeTab === tab.key && styles.activeTab]}
            onPress={() => setActiveTab(tab.key as any)}
          >
            <Feather
              name={tab.icon as any}
              size={14}
              color={activeTab === tab.key ? '#2E7D32' : '#666'}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === tab.key && styles.activeTabText,
              ]}
            >
              {tab.label}
            </Text>
            <View style={styles.tabBadge}>
              <Text style={styles.tabBadgeText}>{getTabCount(tab.key as any)}</Text>
            </View>
          </TouchableOpacity>
        ))}
      </View>

      <ScrollView
        style={styles.content}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {loading ? (
          <View style={styles.loadingContainer}>
            <Text style={styles.loadingText}>Carregando...</Text>
          </View>
        ) : getFilteredRegistros().length === 0 ? (
          <View style={styles.emptyContainer}>
            <Feather name="heart" size={48} color="#CCC" />
            <Text style={styles.emptyText}>Nenhum registro encontrado</Text>
            <Text style={styles.emptySubtext}>
              Toque no + para adicionar um novo registro de saúde
            </Text>
          </View>
        ) : (
          getFilteredRegistros().map(renderRegistroCard)
        )}
      </ScrollView>

      {renderCreateModal()}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    color: '#2E7D32',
  },
  addButton: {
    backgroundColor: '#2E7D32',
    padding: 8,
    borderRadius: 20,
  },
  tabsContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFF',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  tab: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    paddingHorizontal: 4,
    borderRadius: 8,
    marginHorizontal: 2,
  },
  activeTab: {
    backgroundColor: '#E8F5E8',
  },
  tabText: {
    fontSize: 11,
    color: '#666',
    marginLeft: 4,
    marginRight: 4,
  },
  activeTabText: {
    color: '#2E7D32',
    fontWeight: '500',
  },
  tabBadge: {
    backgroundColor: '#2E7D32',
    borderRadius: 8,
    paddingHorizontal: 4,
    paddingVertical: 2,
    minWidth: 16,
    alignItems: 'center',
  },
  tabBadgeText: {
    fontSize: 9,
    color: '#FFF',
    fontWeight: '600',
  },
  content: {
    flex: 1,
    padding: 20,
  },
  registroCard: {
    backgroundColor: '#FFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  registroVencido: {
    borderLeftWidth: 4,
    borderLeftColor: '#F44336',
  },
  registroVencendo: {
    borderLeftWidth: 4,
    borderLeftColor: '#FF9800',
  },
  registroHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  registroInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  registroIcon: {
    marginRight: 12,
  },
  registroTipo: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  registroData: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  registroActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  reacaoBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFEBEE',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 8,
    marginRight: 8,
  },
  reacaoText: {
    fontSize: 10,
    color: '#F44336',
    fontWeight: '500',
    marginLeft: 2,
  },
  actionButton: {
    padding: 8,
    marginLeft: 4,
  },
  registroDetails: {
    borderTopWidth: 1,
    borderTopColor: '#F0F0F0',
    paddingTop: 12,
  },
  detailText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  detailLabel: {
    fontWeight: '500',
    color: '#333',
  },
  proximaVencida: {
    color: '#F44336',
  },
  proximaVencendo: {
    color: '#FF9800',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 40,
  },
  loadingText: {
    fontSize: 16,
    color: '#666',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '500',
    color: '#666',
    marginTop: 16,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#999',
    marginTop: 8,
    textAlign: 'center',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#FFF',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  saveButton: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2E7D32',
  },
  modalContent: {
    flex: 1,
    padding: 20,
  },
  formGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#DDD',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#FAFAFA',
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  radioGroup: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  radioButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#DDD',
    backgroundColor: '#FFF',
  },
  radioButtonSelected: {
    backgroundColor: '#2E7D32',
    borderColor: '#2E7D32',
  },
  radioText: {
    fontSize: 14,
    color: '#666',
  },
  radioTextSelected: {
    color: '#FFF',
    fontWeight: '500',
  },
  switchGroup: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
});

export default SaudeAnimalScreen;
