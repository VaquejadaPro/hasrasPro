import React, { useState, useEffect } from 'react';
import {
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Alert,
  RefreshControl,
  View,
  Text,
  StyleSheet,
  Modal,
  TextInput,
  Switch,
} from 'react-native';
import { Feather } from '@expo/vector-icons';
import { animalService } from '../services/animalService';
import { ManejoReprodutivo, EventoReprodutivo } from '../types';

interface ManejoReprodutivoScreenProps {
  harasId: string;
}

const ManejoReprodutivoScreen: React.FC<ManejoReprodutivoScreenProps> = ({ harasId }) => {
  const [manejos, setManejos] = useState<ManejoReprodutivo[]>([]);
  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [editingManejo, setEditingManejo] = useState<ManejoReprodutivo | null>(null);
  const [activeTab, setActiveTab] = useState<'coberturas' | 'implantacoes' | 'partos'>('coberturas');

  // Form states
  const [formData, setFormData] = useState({
    tipo: 'cobertura' as EventoReprodutivo['tipo'],
    animalId: '',
    parceirosId: '',
    data: new Date().toISOString().split('T')[0],
    observacoes: '',
    sucesso: true,
    custoOperacao: '',
    responsavel: '',
    condicoesTempo: '',
  });

  const [filterData, setFilterData] = useState({
    dataInicio: '',
    dataFim: '',
    tipo: '',
    animal: '',
    sucesso: '',
  });

  useEffect(() => {
    loadManejos();
  }, []);

  const loadManejos = async () => {
    try {
      setLoading(true);
      const data = await animalService.getManejoReprodutivo(harasId);
      setManejos(data);
    } catch (error) {
      console.error('Erro ao carregar manejos:', error);
      Alert.alert('Erro', 'Falha ao carregar registros de manejo reprodutivo');
    } finally {
      setLoading(false);
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await loadManejos();
    setRefreshing(false);
  };

  const handleSaveManejo = async () => {
    try {
      if (!formData.animalId || !formData.data) {
        Alert.alert('Erro', 'Preencha todos os campos obrigatórios');
        return;
      }

      const manejoData = {
        ...formData,
        harasId,
        custoOperacao: parseFloat(formData.custoOperacao) || 0,
      };

      if (editingManejo) {
        await animalService.updateManejoReprodutivo(editingManejo.id, manejoData);
        Alert.alert('Sucesso', 'Manejo atualizado com sucesso');
      } else {
        await animalService.createManejoReprodutivo(manejoData);
        Alert.alert('Sucesso', 'Manejo registrado com sucesso');
      }

      setShowCreateModal(false);
      setEditingManejo(null);
      resetForm();
      loadManejos();
    } catch (error) {
      console.error('Erro ao salvar manejo:', error);
      Alert.alert('Erro', 'Falha ao salvar manejo reprodutivo');
    }
  };

  const handleDeleteManejo = async (id: string) => {
    Alert.alert(
      'Confirmar Exclusão',
      'Deseja realmente excluir este registro de manejo?',
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Excluir',
          style: 'destructive',
          onPress: async () => {
            try {
              await animalService.deleteManejoReprodutivo(id);
              Alert.alert('Sucesso', 'Manejo excluído com sucesso');
              loadManejos();
            } catch (error) {
              console.error('Erro ao excluir manejo:', error);
              Alert.alert('Erro', 'Falha ao excluir manejo');
            }
          },
        },
      ]
    );
  };

  const resetForm = () => {
    setFormData({
      tipo: 'cobertura',
      animalId: '',
      parceirosId: '',
      data: new Date().toISOString().split('T')[0],
      observacoes: '',
      sucesso: true,
      custoOperacao: '',
      responsavel: '',
      condicoesTempo: '',
    });
  };

  const openEditModal = (manejo: ManejoReprodutivo) => {
    setEditingManejo(manejo);
    setFormData({
      tipo: manejo.tipo,
      animalId: manejo.animalId,
      parceirosId: manejo.parceirosId || '',
      data: manejo.data.split('T')[0],
      observacoes: manejo.observacoes || '',
      sucesso: manejo.sucesso,
      custoOperacao: manejo.custoOperacao?.toString() || '',
      responsavel: manejo.responsavel || '',
      condicoesTempo: manejo.condicoesTempo || '',
    });
    setShowCreateModal(true);
  };

  const getFilteredManejos = () => {
    let filtered = manejos;

    if (activeTab === 'coberturas') {
      filtered = filtered.filter(m => m.tipo === 'cobertura' || m.tipo === 'inseminacao');
    } else if (activeTab === 'implantacoes') {
      filtered = filtered.filter(m => m.tipo === 'implantacao');
    } else if (activeTab === 'partos') {
      filtered = filtered.filter(m => m.tipo === 'parto');
    }

    return filtered;
  };

  const getStatusColor = (sucesso: boolean) => {
    return sucesso ? '#4CAF50' : '#F44336';
  };

  const getStatusText = (sucesso: boolean) => {
    return sucesso ? 'Sucesso' : 'Falha';
  };

  const getTipoIcon = (tipo: EventoReprodutivo['tipo']) => {
    switch (tipo) {
      case 'cobertura':
      case 'inseminacao':
        return 'heart';
      case 'implantacao':
        return 'plus-circle';
      case 'parto':
        return 'baby';
      default:
        return 'circle';
    }
  };

  const renderManejoCard = (manejo: ManejoReprodutivo) => (
    <View key={manejo.id} style={styles.manejoCard}>
      <View style={styles.manejoHeader}>
        <View style={styles.manejoInfo}>
          <Feather
            name={getTipoIcon(manejo.tipo)}
            size={20}
            color="#2E7D32"
            style={styles.manejoIcon}
          />
          <View>
            <Text style={styles.manejoTipo}>
              {manejo.tipo.charAt(0).toUpperCase() + manejo.tipo.slice(1)}
            </Text>
            <Text style={styles.manejoData}>
              {new Date(manejo.data).toLocaleDateString('pt-BR')}
            </Text>
          </View>
        </View>
        <View style={styles.manejoActions}>
          <View style={[styles.statusBadge, { backgroundColor: getStatusColor(manejo.sucesso) }]}>
            <Text style={styles.statusText}>{getStatusText(manejo.sucesso)}</Text>
          </View>
          <TouchableOpacity
            onPress={() => openEditModal(manejo)}
            style={styles.actionButton}
          >
            <Feather name="edit-2" size={16} color="#666" />
          </TouchableOpacity>
          <TouchableOpacity
            onPress={() => handleDeleteManejo(manejo.id)}
            style={styles.actionButton}
          >
            <Feather name="trash-2" size={16} color="#F44336" />
          </TouchableOpacity>
        </View>
      </View>

      <View style={styles.manejoDetails}>
        <Text style={styles.detailText}>
          <Text style={styles.detailLabel}>Animal:</Text> {manejo.animalNome}
        </Text>
        {manejo.parceirosNome && (
          <Text style={styles.detailText}>
            <Text style={styles.detailLabel}>Parceiro:</Text> {manejo.parceirosNome}
          </Text>
        )}
        {manejo.responsavel && (
          <Text style={styles.detailText}>
            <Text style={styles.detailLabel}>Responsável:</Text> {manejo.responsavel}
          </Text>
        )}
        {manejo.custoOperacao && (
          <Text style={styles.detailText}>
            <Text style={styles.detailLabel}>Custo:</Text> R$ {manejo.custoOperacao.toFixed(2)}
          </Text>
        )}
        {manejo.observacoes && (
          <Text style={styles.detailText}>
            <Text style={styles.detailLabel}>Observações:</Text> {manejo.observacoes}
          </Text>
        )}
      </View>
    </View>
  );

  const renderCreateModal = () => (
    <Modal
      visible={showCreateModal}
      animationType="slide"
      presentationStyle="pageSheet"
    >
      <SafeAreaView style={styles.modalContainer}>
        <View style={styles.modalHeader}>
          <TouchableOpacity
            onPress={() => {
              setShowCreateModal(false);
              setEditingManejo(null);
              resetForm();
            }}
          >
            <Feather name="x" size={24} color="#666" />
          </TouchableOpacity>
          <Text style={styles.modalTitle}>
            {editingManejo ? 'Editar Manejo' : 'Novo Manejo Reprodutivo'}
          </Text>
          <TouchableOpacity onPress={handleSaveManejo}>
            <Text style={styles.saveButton}>Salvar</Text>
          </TouchableOpacity>
        </View>

        <ScrollView style={styles.modalContent}>
          <View style={styles.formGroup}>
            <Text style={styles.label}>Tipo de Manejo</Text>
            <View style={styles.radioGroup}>
              {['cobertura', 'inseminacao', 'implantacao', 'parto'].map((tipo) => (
                <TouchableOpacity
                  key={tipo}
                  style={[
                    styles.radioButton,
                    formData.tipo === tipo && styles.radioButtonSelected,
                  ]}
                  onPress={() => setFormData({ ...formData, tipo: tipo as EventoReprodutivo['tipo'] })}
                >
                  <Text
                    style={[
                      styles.radioText,
                      formData.tipo === tipo && styles.radioTextSelected,
                    ]}
                  >
                    {tipo.charAt(0).toUpperCase() + tipo.slice(1)}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Animal *</Text>
            <TextInput
              style={styles.input}
              value={formData.animalId}
              onChangeText={(text) => setFormData({ ...formData, animalId: text })}
              placeholder="ID do animal"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Parceiro</Text>
            <TextInput
              style={styles.input}
              value={formData.parceirosId}
              onChangeText={(text) => setFormData({ ...formData, parceirosId: text })}
              placeholder="ID do parceiro (garanhão/doadora)"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Data *</Text>
            <TextInput
              style={styles.input}
              value={formData.data}
              onChangeText={(text) => setFormData({ ...formData, data: text })}
              placeholder="YYYY-MM-DD"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Responsável</Text>
            <TextInput
              style={styles.input}
              value={formData.responsavel}
              onChangeText={(text) => setFormData({ ...formData, responsavel: text })}
              placeholder="Nome do responsável"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Custo da Operação (R$)</Text>
            <TextInput
              style={styles.input}
              value={formData.custoOperacao}
              onChangeText={(text) => setFormData({ ...formData, custoOperacao: text })}
              placeholder="0.00"
              keyboardType="numeric"
            />
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Condições do Tempo</Text>
            <TextInput
              style={styles.input}
              value={formData.condicoesTempo}
              onChangeText={(text) => setFormData({ ...formData, condicoesTempo: text })}
              placeholder="Ex: Ensolarado, 25°C"
            />
          </View>

          <View style={styles.formGroup}>
            <View style={styles.switchGroup}>
              <Text style={styles.label}>Sucesso</Text>
              <Switch
                value={formData.sucesso}
                onValueChange={(value) => setFormData({ ...formData, sucesso: value })}
                trackColor={{ false: '#DDD', true: '#4CAF50' }}
                thumbColor={formData.sucesso ? '#FFF' : '#FFF'}
              />
            </View>
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>Observações</Text>
            <TextInput
              style={[styles.input, styles.textArea]}
              value={formData.observacoes}
              onChangeText={(text) => setFormData({ ...formData, observacoes: text })}
              placeholder="Observações adicionais..."
              multiline
              numberOfLines={4}
            />
          </View>
        </ScrollView>
      </SafeAreaView>
    </Modal>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Manejo Reprodutivo</Text>
        <TouchableOpacity
          onPress={() => setShowCreateModal(true)}
          style={styles.addButton}
        >
          <Feather name="plus" size={20} color="#FFF" />
        </TouchableOpacity>
      </View>

      <View style={styles.tabsContainer}>
        {[
          { key: 'coberturas', label: 'Coberturas', icon: 'heart' },
          { key: 'implantacoes', label: 'Implantações', icon: 'plus-circle' },
          { key: 'partos', label: 'Partos', icon: 'baby' },
        ].map((tab) => (
          <TouchableOpacity
            key={tab.key}
            style={[styles.tab, activeTab === tab.key && styles.activeTab]}
            onPress={() => setActiveTab(tab.key as any)}
          >
            <Feather
              name={tab.icon as any}
              size={16}
              color={activeTab === tab.key ? '#2E7D32' : '#666'}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === tab.key && styles.activeTabText,
              ]}
            >
              {tab.label}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      <ScrollView
        style={styles.content}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {loading ? (
          <View style={styles.loadingContainer}>
            <Text style={styles.loadingText}>Carregando...</Text>
          </View>
        ) : getFilteredManejos().length === 0 ? (
          <View style={styles.emptyContainer}>
            <Feather name="clipboard" size={48} color="#CCC" />
            <Text style={styles.emptyText}>Nenhum registro encontrado</Text>
            <Text style={styles.emptySubtext}>
              Toque no + para adicionar um novo registro
            </Text>
          </View>
        ) : (
          getFilteredManejos().map(renderManejoCard)
        )}
      </ScrollView>

      {renderCreateModal()}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  title: {
    fontSize: 20,
    fontWeight: '600',
    color: '#2E7D32',
  },
  addButton: {
    backgroundColor: '#2E7D32',
    padding: 8,
    borderRadius: 20,
  },
  tabsContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFF',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  tab: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    marginHorizontal: 4,
  },
  activeTab: {
    backgroundColor: '#E8F5E8',
  },
  tabText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 4,
  },
  activeTabText: {
    color: '#2E7D32',
    fontWeight: '500',
  },
  content: {
    flex: 1,
    padding: 20,
  },
  manejoCard: {
    backgroundColor: '#FFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  manejoHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  manejoInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  manejoIcon: {
    marginRight: 12,
  },
  manejoTipo: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  manejoData: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  manejoActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    marginRight: 8,
  },
  statusText: {
    fontSize: 12,
    color: '#FFF',
    fontWeight: '500',
  },
  actionButton: {
    padding: 8,
    marginLeft: 4,
  },
  manejoDetails: {
    borderTopWidth: 1,
    borderTopColor: '#F0F0F0',
    paddingTop: 12,
  },
  detailText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  detailLabel: {
    fontWeight: '500',
    color: '#333',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 40,
  },
  loadingText: {
    fontSize: 16,
    color: '#666',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '500',
    color: '#666',
    marginTop: 16,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#999',
    marginTop: 8,
    textAlign: 'center',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#FFF',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  saveButton: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2E7D32',
  },
  modalContent: {
    flex: 1,
    padding: 20,
  },
  formGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#DDD',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#FAFAFA',
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  radioGroup: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  radioButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#DDD',
    backgroundColor: '#FFF',
  },
  radioButtonSelected: {
    backgroundColor: '#2E7D32',
    borderColor: '#2E7D32',
  },
  radioText: {
    fontSize: 14,
    color: '#666',
  },
  radioTextSelected: {
    color: '#FFF',
    fontWeight: '500',
  },
  switchGroup: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
});

export default ManejoReprodutivoScreen;
